---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: knowledge-base-gpt-simple-test
spec:
  params:
  - description: 'Snapshot of the application'
    name: SNAPSHOT
    default: '{"components": [{"name":"knowledge-base-gpt", "containerImage": "quay.io/yblum/knowledge_base_gpt:latest", "source":{"git":{"url": "https://github.com/ygalblum/knowledge-base-gpt.git", "revision": "main"}}}]}'
    type: string
  tasks:
  - name: read-snapshot
    params:
    - name: SNAPSHOT
      value: "$(params.SNAPSHOT)"
    taskSpec:
      params:
      - name: SNAPSHOT
      results:
      - name: git-url
        description: URL of the GIT repository
      - name: git-revision
        description: GIT revision to use
      - name: container-name
        description: FQDN of the container image for the test
      steps:
      - name: store-container-image
        image: quay.io/redhat-appstudio/konflux-test:stable
        env:
        - name: SNAPSHOT
          value: "$(params.SNAPSHOT)"
        - name: COMPONENT_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['appstudio.openshift.io/component']
        script: |
          #!/bin/bash
          set -ex
          COMPONENT_CONTAINER_IMAGE=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .containerImage' <<< "${SNAPSHOT}")
          GIT_URL=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .source.git.url' <<< "${SNAPSHOT}")
          GIT_REVISION=$(jq -r --arg component_name "${COMPONENT_NAME}" '.components[] | select(.name == $component_name) | .source.git.revision' <<< "${SNAPSHOT}")
          echo -n "$COMPONENT_CONTAINER_IMAGE" > "$(results.container-name.path)"
          echo -n "$GIT_URL" > "$(results.git-url.path)"
          echo -n "$GIT_REVISION" > "$(results.git-revision.path)"

  - name: provision-env
    runAfter:
    - read-snapshot
    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/ygalblum/knowledge-base-gpt
      - name: revision
        value: main
      - name: pathInRepo
        value: tests/sub-system/simple_test/tekton/provision-env-with-ephemeral-namespace.yaml
    params:
    - name: KONFLUXNAMESPACE
      value: $(context.pipelineRun.namespace)
    - name: PIPELINERUN_NAME
      value: $(context.pipelineRun.name)
    - name: PIPELINERUN_UID
      value: $(context.pipelineRun.uid)

  - name: setup-resources
    runAfter:
    - read-snapshot
    - provision-env
    params:
    - name: KNOWLEDGE_BASE_GPT_IMAGE
      value: "$(tasks.read-snapshot.results.container-name)"
    - name: GIT_URL
      value: "$(tasks.read-snapshot.results.git-url)"
    - name: GIT_REVISION
      value: "$(tasks.read-snapshot.results.git-revision)"
    taskSpec:
      params:
      - name: KNOWLEDGE_BASE_GPT_IMAGE
      - name: GIT_URL
      - name: GIT_REVISION
      results:
        - name: slack-server-url
      steps:
      - name: setup-resources
        image: quay.io/redhat-appstudio/konflux-test:stable
        env:
        - name: KNOWLEDGE_BASE_GPT_IMAGE
          value: "$(params.KNOWLEDGE_BASE_GPT_IMAGE)"
        - name: GIT_URL
          value: "$(params.GIT_URL)"
        - name: GIT_REVISION
          value: "$(params.GIT_REVISION)"
        - name: KUBECONFIG_VALUE
          valueFrom:
            secretKeyRef:
              name: "$(tasks.provision-env.results.secretRef)"
              key: kubeconfig
        script: |
          #!/bin/bash
          set -ex
          # Install envsubst
          microdnf install -y gettext
          # Store the kubeconfig into a file and use it
          cat <<< "$KUBECONFIG_VALUE" > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          # Calcualte base URL
          GITHUB_RAW_RESOURCES_URL=$(echo -n $GIT_URL | awk -v revision="$GIT_REVISION" -v path="tests/sub-system/simple_test/resources" '{ gsub("https://github.com/", "https://raw.githubusercontent.com/"); gsub(".git$", ""); print $0 "/" revision "/" path}')
          # Create the Slack Server Mock and wait for it
          oc apply -f $GITHUB_RAW_RESOURCES_URL/slack-server-mock.yml
          oc wait --for=condition=available deployment slack-server-mock
          # Create the Application using the image under test and wait for it
          curl $GITHUB_RAW_RESOURCES_URL/slackbot.yml | envsubst | kubectl apply -f -
          oc wait --for=condition=available deployment knowledgebase
          # Store the FQDN of the mock server
          oc get route slack-server-mock -o jsonpath={.status.ingress[0].host} > "$(results.slack-server-url.path)"

  - name: tests
    runAfter:
    - setup-resources
    params:
    - name: GIT_URL
      value: "$(tasks.read-snapshot.results.git-url)"
    - name: GIT_REVISION
      value: "$(tasks.read-snapshot.results.git-revision)"
    - name: SLACK_SERVER_URL
      value: "$(tasks.setup-resources.results.slack-server-url)"
    taskSpec:
      params:
      - name: GIT_URL
      - name: GIT_REVISION
      - name: SLACK_SERVER_URL
      steps:
      - name: clone-repo
        image: docker.io/alpine/git:latest
        env:
        - name: GIT_URL
          value: "$(params.GIT_URL)"
        - name: GIT_REVISION
          value: "$(params.GIT_REVISION)"
        script: |
          git clone "$GIT_URL" /workspace
          cd /workspace
          git checkout "$GIT_REVISION"
      - name: store-slack-server-url
        image: quay.io/redhat-appstudio/konflux-test:stable
        env:
        - name: SLACK_SERVER_URL
          value: "$(params.SLACK_SERVER_URL)"
        script: |
          echo -n "$SLACK_SERVER_URL" > /workspace/slack_server_url
      - name: run-tests
        image: docker.io/python:3.11.1-bullseye
        script: |
          pip install -r /workspace/tests/sub-system/simple_test/requirements.txt
          pip install pytest
          pytest /workspace/tests/sub-system/simple_test
