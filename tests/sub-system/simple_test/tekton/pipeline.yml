---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: knowledge-base-gpt-simple-test
spec:
  params:
  - description: 'Snapshot of the application'
    name: SNAPSHOT
    default: '{"components": [{"name":"knowledge-base-gpt", "containerImage": "quay.io/yblum/knowledge_base_gpt:latest", "source":{"git":{"url": "https://github.com/ygalblum/knowledge-base-gpt.git", "revision": "main"}}}]}'
    type: string
  tasks:
  - name: parse-metadata
    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/konflux-ci/integration-examples
      - name: revision
        value: main
      - name: pathInRepo
        value: tasks/test_metadata.yaml
    params:
    - name: SNAPSHOT
      value: $(params.SNAPSHOT)

  - name: provision-eaas-space
    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/konflux-ci/build-definitions.git
      - name: revision
        value: main
      - name: pathInRepo
        value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
    params:
    - name: ownerName
      value: $(context.pipelineRun.name)
    - name: ownerUid
      value: $(context.pipelineRun.uid)

  - name: provision-cluster
    runAfter:
    - provision-eaas-space
    taskSpec:
      results:
      - name: clusterName
        value: "$(steps.create-cluster.results.clusterName)"
      steps:
      - name: get-supported-versions
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
      - name: pick-version
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
        params:
        - name: prefix
          value: "$(steps.get-supported-versions.results.versions[0])."
      - name: create-cluster
        ref:
          resolver: git
          params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
        params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: version
          value: "$(steps.pick-version.results.version)"
        - name: instanceType
          value: m5.large

  - name: setup-resources
    runAfter:
    - parse-metadata
    - provision-cluster
    params:
    - name: KNOWLEDGE_BASE_GPT_IMAGE
      value: "$(tasks.parse-metadata.results.component-container-image)"
    - name: GIT_URL
      value: "$(tasks.parse-metadata.results.source-git-url)"
    - name: GIT_REVISION
      value: "$(tasks.parse-metadata.results.source-git-revision)"
    taskSpec:
      params:
      - name: KNOWLEDGE_BASE_GPT_IMAGE
      - name: GIT_URL
      - name: GIT_REVISION
      volumes:
      - name: credentials
        emptyDir: {}
      results:
        - name: slack-server-url
      steps:
      - name: get-kubeconfig
        ref:
          resolver: git
          params:
            - name: url
              value: https://github.com/konflux-ci/build-definitions.git
            - name: revision
              value: main
            - name: pathInRepo
              value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
        params:
          - name: eaasSpaceSecretRef
            value: $(tasks.provision-eaas-space.results.secretRef)
          - name: clusterName
            value: "$(tasks.provision-cluster.results.clusterName)"
          - name: credentials
            value: credentials
      - name: setup-resources
        image: quay.io/redhat-appstudio/konflux-test:stable
        env:
        - name: KNOWLEDGE_BASE_GPT_IMAGE
          value: "$(params.KNOWLEDGE_BASE_GPT_IMAGE)"
        - name: GIT_URL
          value: "$(params.GIT_URL)"
        - name: GIT_REVISION
          value: "$(params.GIT_REVISION)"
        - name: KUBECONFIG
          value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
        volumeMounts:
        - name: credentials
          mountPath: /credentials
        script: |
          #!/bin/bash
          set -x
          moreInfo() {
            local label=$1
            echo "Getting more information"
            oc describe deployment -l $label
            oc describe replicasets.apps -l $label
            oc describe pods -l $label
            oc logs -l $label
          }
          # Install envsubst
          microdnf install -y gettext
          # Calcualte base URL
          GITHUB_RAW_RESOURCES_URL=$(echo -n $GIT_URL | awk -v revision="$GIT_REVISION" -v path="tests/sub-system/simple_test/resources" '{ gsub("https://github.com/", "https://raw.githubusercontent.com/"); gsub(".git$", ""); print $0 "/" revision "/" path}')
          # Create the Slack Server Mock and wait for it
          oc apply -f $GITHUB_RAW_RESOURCES_URL/slack-server-mock.yml
          oc wait --for=condition=available --timeout=1m deployment slack-server-mock
          ret=$?
          if [ $ret -ne 0 ]; then
            moreInfo app=slack-server-mock
            exit $ret
          fi
          # Create the Application using the image under test and wait for it
          curl $GITHUB_RAW_RESOURCES_URL/slackbot.yml | envsubst | kubectl apply -f -
          oc wait --for=condition=available --timeout=20m deployment knowledgebase
          ret=$?
          if [ $ret -ne 0 ]; then
            moreInfo app=knowledgebase
            exit $ret
          fi
          # Store the FQDN of the mock server
          oc get route slack-server-mock -o jsonpath={.status.ingress[0].host} > "$(results.slack-server-url.path)"

  - name: tests
    runAfter:
    - setup-resources
    params:
    - name: GIT_URL
      value: "$(tasks.parse-metadata.results.source-git-url)"
    - name: GIT_REVISION
      value: "$(tasks.parse-metadata.results.source-git-revision)"
    - name: SLACK_SERVER_URL
      value: "$(tasks.setup-resources.results.slack-server-url)"
    taskSpec:
      params:
      - name: GIT_URL
      - name: GIT_REVISION
      - name: SLACK_SERVER_URL
      steps:
      - name: clone-repo
        image: docker.io/alpine/git:latest
        env:
        - name: GIT_URL
          value: "$(params.GIT_URL)"
        - name: GIT_REVISION
          value: "$(params.GIT_REVISION)"
        script: |
          git clone "$GIT_URL" /workspace
          cd /workspace
          git checkout "$GIT_REVISION"
      - name: store-slack-server-url
        image: quay.io/redhat-appstudio/konflux-test:stable
        env:
        - name: SLACK_SERVER_URL
          value: "$(params.SLACK_SERVER_URL)"
        script: |
          echo -n "$SLACK_SERVER_URL" > /workspace/slack_server_url
      - name: run-tests
        image: docker.io/python:3.11.1-bullseye
        script: |
          pip install -r /workspace/tests/sub-system/simple_test/requirements.txt
          pip install pytest
          pytest /workspace/tests/sub-system/simple_test
